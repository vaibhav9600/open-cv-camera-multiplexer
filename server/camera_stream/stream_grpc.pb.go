// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.1
// source: stream.proto

package camera_stream

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StreamingService_GetDataStreamingStream2_FullMethodName = "/stream.StreamingService/GetDataStreamingStream2"
	StreamingService_GetDataStreaming_FullMethodName        = "/stream.StreamingService/GetDataStreaming"
)

// StreamingServiceClient is the client API for StreamingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamingServiceClient interface {
	// unary
	GetDataStreamingStream2(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (StreamingService_GetDataStreamingStream2Client, error)
	GetDataStreaming(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (StreamingService_GetDataStreamingClient, error)
}

type streamingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamingServiceClient(cc grpc.ClientConnInterface) StreamingServiceClient {
	return &streamingServiceClient{cc}
}

func (c *streamingServiceClient) GetDataStreamingStream2(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (StreamingService_GetDataStreamingStream2Client, error) {
	stream, err := c.cc.NewStream(ctx, &StreamingService_ServiceDesc.Streams[0], StreamingService_GetDataStreamingStream2_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &streamingServiceGetDataStreamingStream2Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamingService_GetDataStreamingStream2Client interface {
	Recv() (*DataResponse, error)
	grpc.ClientStream
}

type streamingServiceGetDataStreamingStream2Client struct {
	grpc.ClientStream
}

func (x *streamingServiceGetDataStreamingStream2Client) Recv() (*DataResponse, error) {
	m := new(DataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamingServiceClient) GetDataStreaming(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (StreamingService_GetDataStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamingService_ServiceDesc.Streams[1], StreamingService_GetDataStreaming_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &streamingServiceGetDataStreamingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamingService_GetDataStreamingClient interface {
	Recv() (*DataResponse, error)
	grpc.ClientStream
}

type streamingServiceGetDataStreamingClient struct {
	grpc.ClientStream
}

func (x *streamingServiceGetDataStreamingClient) Recv() (*DataResponse, error) {
	m := new(DataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamingServiceServer is the server API for StreamingService service.
// All implementations must embed UnimplementedStreamingServiceServer
// for forward compatibility
type StreamingServiceServer interface {
	// unary
	GetDataStreamingStream2(*emptypb.Empty, StreamingService_GetDataStreamingStream2Server) error
	GetDataStreaming(*emptypb.Empty, StreamingService_GetDataStreamingServer) error
	mustEmbedUnimplementedStreamingServiceServer()
}

// UnimplementedStreamingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStreamingServiceServer struct {
}

func (UnimplementedStreamingServiceServer) GetDataStreamingStream2(*emptypb.Empty, StreamingService_GetDataStreamingStream2Server) error {
	return status.Errorf(codes.Unimplemented, "method GetDataStreamingStream2 not implemented")
}
func (UnimplementedStreamingServiceServer) GetDataStreaming(*emptypb.Empty, StreamingService_GetDataStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDataStreaming not implemented")
}
func (UnimplementedStreamingServiceServer) mustEmbedUnimplementedStreamingServiceServer() {}

// UnsafeStreamingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamingServiceServer will
// result in compilation errors.
type UnsafeStreamingServiceServer interface {
	mustEmbedUnimplementedStreamingServiceServer()
}

func RegisterStreamingServiceServer(s grpc.ServiceRegistrar, srv StreamingServiceServer) {
	s.RegisterService(&StreamingService_ServiceDesc, srv)
}

func _StreamingService_GetDataStreamingStream2_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamingServiceServer).GetDataStreamingStream2(m, &streamingServiceGetDataStreamingStream2Server{stream})
}

type StreamingService_GetDataStreamingStream2Server interface {
	Send(*DataResponse) error
	grpc.ServerStream
}

type streamingServiceGetDataStreamingStream2Server struct {
	grpc.ServerStream
}

func (x *streamingServiceGetDataStreamingStream2Server) Send(m *DataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _StreamingService_GetDataStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamingServiceServer).GetDataStreaming(m, &streamingServiceGetDataStreamingServer{stream})
}

type StreamingService_GetDataStreamingServer interface {
	Send(*DataResponse) error
	grpc.ServerStream
}

type streamingServiceGetDataStreamingServer struct {
	grpc.ServerStream
}

func (x *streamingServiceGetDataStreamingServer) Send(m *DataResponse) error {
	return x.ServerStream.SendMsg(m)
}

// StreamingService_ServiceDesc is the grpc.ServiceDesc for StreamingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stream.StreamingService",
	HandlerType: (*StreamingServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetDataStreamingStream2",
			Handler:       _StreamingService_GetDataStreamingStream2_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetDataStreaming",
			Handler:       _StreamingService_GetDataStreaming_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "stream.proto",
}
